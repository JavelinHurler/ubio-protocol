{
  "$id": "https://protocol.automationcloud.net/schema.json",
  "domains": {
    "Generic": {
      "description": "Generic domain contains type definitions used in other domains.",
      "private": false,
      "inputs": {},
      "outputs": {},
      "types": {
        "Ages": {
          "type": "array",
          "description": "A list of ages of persons.",
          "items": {
            "type": "number",
            "minimum": 0,
            "maximum": 200,
            "example": 42
          }
        },
        "URL": {
          "type": "string",
          "format": "url",
          "description": "URL Record, as defined by <a href=\"https://url.spec.whatwg.org/#concept-url\" target=\"_blank\" rel=\"noopener\">WHATWG URL Standard</a>.",
          "example": "http://example.com"
        },
        "Cookies": {
          "type": "array",
          "description": "An array of cookie definitions.",
          "items": {
            "$ref": "#/domains/Generic/types/Cookie"
          }
        },
        "Cookie": {
          "type": "object",
          "description": "An object which defines a cookie. For more information on the fields of this object, see <a href=\"https://tools.ietf.org/html/rfc6265#section-5.2\" target=\"_blank\" rel=\"noopener\">RFC 6265 section 5.2</a>.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Cookie name."
            },
            "value": {
              "type": "string",
              "description": "Cookie value."
            },
            "url": {
              "type": "string",
              "format": "url",
              "description": "The URL from which the cookie is set."
            },
            "domain": {
              "type": "string",
              "description": "Cookie domain."
            },
            "path": {
              "type": "string",
              "description": "Cookie path."
            },
            "secure": {
              "type": "boolean",
              "description": "True if cookie is secure."
            },
            "httpOnly": {
              "type": "boolean",
              "description": "True if cookie is http-only."
            },
            "sameSite": {
              "enum": [
                "Strict",
                "Lax"
              ],
              "description": "Cookie same-site type."
            },
            "expires": {
              "type": "number",
              "description": "Expiration date in seconds since the epoch (January 1, 1970 UTC)."
            }
          },
          "required": [
            "name",
            "value",
            "url"
          ],
          "additionalProperties": false
        },
        "Account": {
          "type": "object",
          "description": "Account information for filling in contact details.<br/>Receipts and booking references will typically be sent to specified <code>email</code>.<br/>Some websites also require registering user account, in which case <code>password</code> must be provided.",
          "pii": true,
          "properties": {
            "email": {
              "type": "string",
              "description": "Account email, typically used for user sign up / sign in.<br/>Note: most websites will send receipt and/or confirmation emails when order is placed successfully. Use contactEmail when different.<br/>Automation may result in registering new user account with this email address, and may fail if account with specified email already exists. We recommend you <a href=\"https://docs.automationcloud.net/v2.0/docs/email-proxy\" target=\"_blank\" rel=\"noopener\">use an email proxy to mitigate this issue</a>.",
              "format": "email",
              "example": "hello@example.com"
            },
            "contactEmail": {
              "type": "string",
              "description": "Contact email. When this property is not set but required by the target website, account.email is used instead.",
              "format": "email",
              "example": "client@example.com"
            },
            "password": {
              "type": "string",
              "description": "May be omitted if particular website does not require user sign in / sign up. Automation may fail if password is required on a particular website but not provided. One strategy could be to always generate random passwords to create one-time account.",
              "default": ""
            },
            "phone": {
              "description": "Account phone number, may also be used as contact details.",
              "$ref": "#/domains/Generic/types/Phone"
            },
            "isExisting": {
              "description": "If value is <code>true</code> automation will try to use account details to perform sign in instead of sign up. Automation will fail if incorrect account details are specified.",
              "type": "boolean"
            }
          },
          "required": [
            "email",
            "phone",
            "isExisting"
          ],
          "additionalProperties": false
        },
        "Person": {
          "type": "object",
          "description": "Basic information about person's identity.",
          "pii": true,
          "properties": {
            "title": {
              "type": "string",
              "description": "",
              "enum": [
                "mr",
                "miss",
                "ms",
                "mrs"
              ]
            },
            "firstName": {
              "type": "string",
              "description": "First name(s) or given name(s), as specified in ID.",
              "minLength": 1,
              "example": "Bob"
            },
            "middleName": {
              "type": "string",
              "default": "",
              "description": "Middle name, if applicable.<br/>This will only be used on websites which provide separate entry for middle names, otherwise it will be ignored.<br/>If middle name is essential for placing order, consider appending it to <code>firstName</code>."
            },
            "lastName": {
              "type": "string",
              "description": "Last name or surname, as specified in ID.",
              "minLength": 1,
              "example": "Smith"
            },
            "document": {
              "$ref": "#/domains/Generic/types/IdentityDocument"
            }
          },
          "required": [
            "title",
            "firstName",
            "lastName"
          ],
          "additionalProperties": false
        },
        "IdentityDocument": {
          "type": "object",
          "description": "Person ID (passport or other document). Automation may fail if this information is required by the website, but not provided.",
          "pii": true,
          "properties": {
            "type": {
              "type": "string",
              "description": "Document type.",
              "enum": [
                "passport"
              ]
            },
            "number": {
              "type": "string",
              "description": "Document number.",
              "example": "75 127001"
            },
            "issueDate": {
              "type": "string",
              "format": "date",
              "example": "2008-01-01"
            },
            "expirationDate": {
              "type": "string",
              "format": "date",
              "example": "2028-01-01"
            },
            "issueCountryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Code of country where the document was issued."
            }
          },
          "required": [
            "type",
            "number",
            "expirationDate",
            "issueCountryCode"
          ],
          "additionalProperties": false
        },
        "Address": {
          "type": "object",
          "description": "Physical address information, typically used as part of billing or shipping address objects.",
          "pii": true,
          "properties": {
            "line1": {
              "type": "string",
              "description": "Street name with house number.",
              "minLength": 1,
              "example": "501 Twin Peaks Blv"
            },
            "line2": {
              "type": "string",
              "description": "Additional address information (e.g. flat).",
              "example": "Flat 2"
            },
            "city": {
              "type": "string",
              "description": "Name of city, town or other settlement.",
              "minLength": 1,
              "example": "San Francisco"
            },
            "postcode": {
              "type": "string",
              "description": "Postcode in country-specific format, e.g. 5-digit number in US or <code>E3 3RP</code> in UK.",
              "minLength": 1,
              "example": "94581"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode"
            },
            "countrySubdivision": {
              "$ref": "#/domains/Generic/types/CountrySubdivision"
            }
          },
          "required": [
            "line1",
            "line2",
            "city",
            "postcode",
            "countryCode",
            "countrySubdivision"
          ],
          "additionalProperties": false
        },
        "Phone": {
          "type": "object",
          "description": "Phone information, typically used on contact details pages.",
          "pii": true,
          "properties": {
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode"
            },
            "number": {
              "type": "string",
              "minLength": 9,
              "description": "Mobile phone number (numbers only, excluding country code).",
              "example": "123456789"
            }
          },
          "required": [
            "countryCode",
            "number"
          ],
          "additionalProperties": false
        },
        "PriceConsent": {
          "type": "object",
          "description": "Price consent object used in final price confirmation flow.<br/>When automation reaches final price (typically happens immediately before placing the order) it will emit <code>finalPrice</code> object in output and will wait for consent from you. You then need to provide the exact copy of this object as <code>finalPriceConsent</code> input.",
          "properties": {
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "additionalProperties": false,
          "required": [
            "price"
          ]
        },
        "Price": {
          "type": "object",
          "description": "Basic price information.",
          "properties": {
            "currencyCode": {
              "$ref": "#/domains/Generic/types/CurrencyCode"
            },
            "value": {
              "type": "integer",
              "minimum": 0,
              "description": "A positive integer in the smallest currency unit (100 for £1.00).",
              "example": "12300"
            }
          },
          "required": [
            "currencyCode",
            "value"
          ],
          "additionalProperties": false
        },
        "Payment": {
          "type": "object",
          "description": "Payment information, including card details and billing address.",
          "pii": true,
          "properties": {
            "card": {
              "$ref": "#/domains/Generic/types/PaymentCard"
            },
            "person": {
              "$ref": "#/domains/Generic/types/Person"
            },
            "address": {
              "$ref": "#/domains/Generic/types/Address"
            }
          },
          "required": [
            "card",
            "person",
            "address"
          ],
          "additionalProperties": false
        },
        "PaymentCard": {
          "type": "object",
          "description": "Payment information for card payment. Note: card number should not be submitted in plain text as per PCI DSS. Use <code>panToken</code> to provide it securely instead.",
          "pii": true,
          "properties": {
            "type": {
              "type": "string",
              "description": "Card type, debit or credit.",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "holderType": {
              "type": "string",
              "description": "Card's holder type, personal or corporate.",
              "enum": [
                "personal",
                "corporate"
              ],
              "default": "corporate"
            },
            "brand": {
              "type": "string",
              "description": "Card brand, must be one of the supported card brands. Automation may fail if a specific card brand is not supported on a particular website.",
              "enum": [
                "visa",
                "mastercard",
                "amex",
                "discover"
              ]
            },
            "expirationDate": {
              "type": "string",
              "description": "Expiration date in YYYY-MM format as written on card.",
              "example": "2020-04",
              "pattern": "^20[0-9]{2}-(?:0[1-9]|1[0-2])$",
              "minLength": 7,
              "maxLength": 7
            },
            "name": {
              "type": "string",
              "description": "Cardholder's name as written on card.",
              "example": "Alice Smith"
            },
            "cvv": {
              "type": "string",
              "description": "Security code written on card, 3- or 4-digit number.",
              "example": "123",
              "minLength": 3,
              "maxLength": 4
            }
          },
          "required": [
            "type",
            "brand",
            "expirationDate",
            "name",
            "cvv"
          ],
          "additionalProperties": false
        },
        "PanToken": {
          "type": "string",
          "description": "An encrypted PAN token, obtained from Automation Cloud Vault. Please consult \"Vaulting Payment Card Information\" section of Documentation for information on how to acquire it.",
          "example": "5d41402abc4b2a76b9719d911017c592",
          "minLength": 20
        },
        "CountryCode": {
          "type": "string",
          "title": "ISO 3166-1 alpha-2 Country Code",
          "description": "ISO 3166-1 alpha-2 code representing the country. United Kingdom is officially assigned the alpha-2 code gb rather than uk. Lowercase.",
          "example": "us",
          "minLength": 2,
          "maxLength": 2,
          "enum": [
            "af",
            "ax",
            "al",
            "dz",
            "as",
            "ad",
            "ao",
            "ai",
            "aq",
            "ag",
            "ar",
            "am",
            "aw",
            "au",
            "at",
            "az",
            "bs",
            "bh",
            "bd",
            "bb",
            "by",
            "be",
            "bz",
            "bj",
            "bm",
            "bt",
            "bo",
            "bq",
            "ba",
            "bw",
            "bv",
            "br",
            "io",
            "bn",
            "bg",
            "bf",
            "bi",
            "kh",
            "cm",
            "ca",
            "cv",
            "ky",
            "cf",
            "td",
            "cl",
            "cn",
            "cx",
            "cc",
            "co",
            "km",
            "cg",
            "cd",
            "ck",
            "cr",
            "ci",
            "hr",
            "cu",
            "cw",
            "cy",
            "cz",
            "dk",
            "dj",
            "dm",
            "do",
            "ec",
            "eg",
            "sv",
            "gq",
            "er",
            "ee",
            "et",
            "fk",
            "fo",
            "fj",
            "fi",
            "fr",
            "gf",
            "pf",
            "tf",
            "ga",
            "gm",
            "ge",
            "de",
            "gh",
            "gi",
            "gr",
            "gl",
            "gd",
            "gp",
            "gu",
            "gt",
            "gg",
            "gn",
            "gw",
            "gy",
            "ht",
            "hm",
            "va",
            "hn",
            "hk",
            "hu",
            "is",
            "in",
            "id",
            "ir",
            "iq",
            "ie",
            "im",
            "il",
            "it",
            "jm",
            "jp",
            "je",
            "jo",
            "kz",
            "ke",
            "ki",
            "kp",
            "kr",
            "kw",
            "kg",
            "la",
            "lv",
            "lb",
            "ls",
            "lr",
            "ly",
            "li",
            "lt",
            "lu",
            "mo",
            "mk",
            "mg",
            "mw",
            "my",
            "mv",
            "ml",
            "mt",
            "mh",
            "mq",
            "mr",
            "mu",
            "yt",
            "mx",
            "fm",
            "md",
            "mc",
            "mn",
            "me",
            "ms",
            "ma",
            "mz",
            "mm",
            "na",
            "nr",
            "np",
            "nl",
            "nc",
            "nz",
            "ni",
            "ne",
            "ng",
            "nu",
            "nf",
            "mp",
            "no",
            "om",
            "pk",
            "pw",
            "ps",
            "pa",
            "pg",
            "py",
            "pe",
            "ph",
            "pn",
            "pl",
            "pt",
            "pr",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "bl",
            "sh",
            "kn",
            "lc",
            "mf",
            "pm",
            "vc",
            "ws",
            "sm",
            "st",
            "sa",
            "sn",
            "rs",
            "sc",
            "sl",
            "sg",
            "sx",
            "sk",
            "si",
            "sb",
            "so",
            "za",
            "gs",
            "ss",
            "es",
            "lk",
            "sd",
            "sr",
            "sj",
            "sz",
            "se",
            "ch",
            "sy",
            "tw",
            "tj",
            "tz",
            "th",
            "tl",
            "tg",
            "tk",
            "to",
            "tt",
            "tn",
            "tr",
            "tm",
            "tc",
            "tv",
            "ug",
            "ua",
            "ae",
            "gb",
            "us",
            "um",
            "uy",
            "uz",
            "vu",
            "ve",
            "vn",
            "vg",
            "vi",
            "wf",
            "eh",
            "ye",
            "zm",
            "zw"
          ]
        },
        "CountrySubdivision": {
          "type": "string",
          "description": "Full name of country subdivision (e.g. state, region, county, etc.), except for US states which require 2 letter code. Lowercased.",
          "example": "ca"
        },
        "CurrencyCode": {
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "title": "ISO 4217 Currency Code",
          "description": "ISO 4217 3-letter code representing the currency. Lowercase.",
          "example": "usd",
          "enum": [
            "aed",
            "all",
            "afn",
            "ars",
            "awg",
            "aud",
            "azn",
            "bsd",
            "bbd",
            "byn",
            "bzd",
            "bmd",
            "bob",
            "bam",
            "bwp",
            "bgn",
            "brl",
            "bnd",
            "khr",
            "cad",
            "kyd",
            "clp",
            "cny",
            "cop",
            "crc",
            "hrk",
            "cup",
            "czk",
            "dkk",
            "dop",
            "xcd",
            "egp",
            "svc",
            "eur",
            "fkp",
            "fjd",
            "ghs",
            "gip",
            "gtq",
            "ggp",
            "gyd",
            "hnl",
            "hkd",
            "huf",
            "isk",
            "inr",
            "idr",
            "irr",
            "imp",
            "ils",
            "jmd",
            "jpy",
            "jep",
            "kzt",
            "kpw",
            "krw",
            "kgs",
            "lak",
            "lbp",
            "lrd",
            "mkd",
            "myr",
            "mur",
            "mxn",
            "mnt",
            "mzn",
            "nad",
            "npr",
            "ang",
            "nzd",
            "nio",
            "ngn",
            "nok",
            "omr",
            "pkr",
            "pab",
            "pyg",
            "pen",
            "php",
            "pln",
            "qar",
            "ron",
            "rub",
            "shp",
            "sar",
            "rsd",
            "scr",
            "sgd",
            "sbd",
            "sos",
            "zar",
            "lkr",
            "sek",
            "chf",
            "srd",
            "syp",
            "twd",
            "thb",
            "ttd",
            "try",
            "tvd",
            "uah",
            "gbp",
            "usd",
            "uyu",
            "uzs",
            "vef",
            "vnd",
            "yer",
            "zwd"
          ]
        },
        "StructuredText": {
          "type": "object",
          "description": "A list of structured text.",
          "properties": {
            "type": {
              "enum": [
                "StructuredText"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name or title of the text grouping."
            },
            "contents": {
              "type": "array",
              "description": "An array of structured text items.",
              "items": {
                "$ref": "#/domains/Generic/types/StructuredTextItem"
              }
            }
          },
          "required": [
            "type",
            "name",
            "contents"
          ],
          "additionalProperties": false
        },
        "StructuredTextItem": {
          "oneOf": [
            {
              "$ref": "#/domains/Generic/types/StructuredText"
            },
            {
              "$ref": "#/domains/Generic/types/File"
            },
            {
              "$ref": "#/domains/Generic/types/Link"
            },
            {
              "$ref": "#/domains/Generic/types/NamedText"
            },
            {
              "$ref": "#/domains/Generic/types/HTML"
            },
            {
              "$ref": "#/domains/Generic/types/Text"
            }
          ]
        },
        "File": {
          "type": "object",
          "description": "A document downloaded from the target website.",
          "properties": {
            "type": {
              "enum": [
                "File"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name or title of the document."
            },
            "uri": {
              "type": "string",
              "description": "Location of the resource."
            }
          },
          "required": [
            "type",
            "name",
            "uri"
          ],
          "additionalProperties": false
        },
        "Link": {
          "type": "object",
          "description": "A document accessible on the target website.",
          "properties": {
            "type": {
              "enum": [
                "Link"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name or title of the document."
            },
            "uri": {
              "type": "string",
              "description": "Location of the resource."
            }
          },
          "required": [
            "type",
            "name",
            "uri"
          ],
          "additionalProperties": false
        },
        "NamedText": {
          "type": "object",
          "description": "A document accessible on the target website.",
          "properties": {
            "type": {
              "enum": [
                "NamedText"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name or title of the text."
            },
            "text": {
              "type": "string",
              "description": "Location of the resource."
            }
          },
          "required": [
            "type",
            "name",
            "text"
          ],
          "additionalProperties": false
        },
        "Text": {
          "type": "object",
          "description": "A document accessible on the target website.",
          "properties": {
            "type": {
              "enum": [
                "Text"
              ]
            },
            "text": {
              "type": "string",
              "description": "Location of the resource."
            }
          },
          "required": [
            "type",
            "text"
          ],
          "additionalProperties": false
        },
        "NamedContents": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "NamedContents"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name or title of the text."
            },
            "contents": {
              "type": "array",
              "description": "An array of structured text items.",
              "items": {
                "$ref": "#/domains/Generic/types/StructuredTextItem"
              }
            }
          },
          "required": [
            "type",
            "name",
            "contents"
          ],
          "additionalProperties": false
        },
        "HTML": {
          "type": "object",
          "description": "Inner HTML contents of an element.",
          "properties": {
            "type": {
              "enum": [
                "HTML"
              ]
            },
            "name": {
              "type": "string",
              "description": "Optional name or title of the HTML section."
            },
            "html": {
              "type": "string",
              "description": "Location of the resource."
            }
          },
          "required": [
            "type",
            "html"
          ],
          "additionalProperties": false
        }
      },
      "errors": [
        {
          "code": "InputInvalid",
          "category": "client",
          "description": "Failed to create a job due to invalid input"
        },
        {
          "code": "JobCancelled",
          "category": "client",
          "description": "Job cancelled by client"
        },
        {
          "code": "InputTimeout",
          "category": "client",
          "description": "Input was not provided within 15 minutes"
        },
        {
          "code": "PaymentRejected",
          "category": "client",
          "description": "Payment rejected due to a problem with the card. A message will be forwarded from the website if available"
        },
        {
          "code": "CardDetailsInvalid",
          "category": "client",
          "description": "Unable to process payment as card details are invalid"
        },
        {
          "code": "AddressInvalid",
          "category": "client",
          "description": "Invalid address provided"
        },
        {
          "code": "AccountDetailsInvalid",
          "category": "client",
          "description": "Cannot sign in as invalid account details provided"
        },
        {
          "code": "PaymentDetailsInvalid",
          "category": "client",
          "description": "Cannot submit or process the payment because the payment details provided are invalid."
        },
        {
          "code": "UrlInvalid",
          "category": "client",
          "description": "Invalid url provided"
        },
        {
          "code": "FinalPriceNotFound",
          "category": "client",
          "description": "Final price provided does not match expectation"
        },
        {
          "code": "PanTokenInvalid",
          "category": "client",
          "description": "Invalid pan token provided"
        },
        {
          "code": "CookieInvalid",
          "category": "client",
          "description": "Invalid cookie provided"
        },
        {
          "code": "PriceChangedAfterConsent",
          "category": "website",
          "description": "Price changed after final price consent."
        },
        {
          "code": "WebsiteValidationFailed",
          "category": "website",
          "description": "Website's validation rule doesn't allow the input data"
        },
        {
          "code": "SystemUnavailable",
          "category": "website",
          "description": "Website system is down/Website doesn't work at the moment"
        },
        {
          "code": "KnownLimitation",
          "category": "website",
          "description": "Cannot process due to known limitation"
        },
        {
          "code": "GenericWebsiteError",
          "category": "website",
          "description": "Website threw general error during automation process. A message will be forwarded from the website if available"
        },
        {
          "code": "UnableToContinueProcess",
          "category": "website",
          "description": "Process couldn't reach the final step. Website finished the process early",
          "example": "Unable to purchase online"
        },
        {
          "code": "SessionExpired",
          "category": "website",
          "description": "The website timed out the session. Each website has its own timeout settings, usually after inactivity such as waiting too long for an input.",
          "example": "Your basket has expired, you must complete the purchase within 5 minutes."
        },
        {
          "code": "ServerError",
          "category": "server",
          "description": "Server Error"
        },
        {
          "code": "JobTimeout",
          "category": "server",
          "description": "Job timeout after an hour of job creation without reaching the final step"
        }
      ],
      "attributes": {
        "url": {
          "type": "string",
          "format": "url",
          "description": "URL Record, as defined by <a href=\"https://url.spec.whatwg.org/#concept-url\" target=\"_blank\" rel=\"noopener\">WHATWG URL Standard</a>.",
          "example": "http://example.com"
        }
      }
    },
    "FlightBooking": {
      "description": "Allows automating airplane tickets booking on airline websites and OTAs.",
      "private": false,
      "inputs": {
        "options": {
          "typeRef": "#/domains/FlightBooking/types/Options",
          "default": {},
          "initial": true
        },
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point. Should be a deep link to either flight page or flight selection page."
        },
        "search": {
          "typeRef": "#/domains/FlightBooking/types/Search",
          "initial": true
        },
        "selectedOutboundFlight": {
          "typeRef": "#/domains/FlightBooking/types/Flight",
          "initial": true
        },
        "selectedInboundFlight": {
          "typeRef": "#/domains/FlightBooking/types/Flight",
          "initial": true
        },
        "itinerary": {
          "typeRef": "#/domains/FlightBooking/types/Itinerary",
          "initial": true,
          "description": "Deprecated. See <a href=\"#search\">/search</a> and <a href=\"#selectedOutboundFlight\">/selectedOutboundFlight</a>.",
          "deprecated": true
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account"
        },
        "passengers": {
          "typeRef": "#/domains/FlightBooking/types/Passengers",
          "initial": true
        },
        "payment": {
          "typeRef": "#/domains/Generic/types/Payment"
        },
        "selectedOutboundFare": {
          "typeRef": "#/domains/FlightBooking/types/Fare",
          "description": "Requested when fare selection for outbound flight is required by website.<br/>At this point <code>availableOutboundFares</code> output should contain information about available fares.<br/>Note: on deep links with pre-selected flight this input is not required.<br/>Automation may fail if incorrect fare is specified, or if fare is no longer available."
        },
        "selectedInboundFare": {
          "typeRef": "#/domains/FlightBooking/types/Fare",
          "description": "Requested when fare selection for inbound flight is required by website.<br/>At this point <code>availableInboundFares</code> output should contain information about available fares.<br/>Note: on deep links with pre-selected flight this input is not required.<br/>Automation may fail if incorrect fare is specified, or if fare is no longer available."
        },
        "selectedSeats": {
          "typeRef": "#/domains/FlightBooking/types/SelectedSeatsStage",
          "staged": true
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken"
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Client's consent for final price, should exactly match the <code>finalPrice</code> object from output.<br/>Automation will not proceed with placing order until the consent is provided."
        }
      },
      "outputs": {
        "availableOutboundFares": {
          "typeRef": "#/domains/FlightBooking/types/AvailableFares",
          "description": "Emitted when actual outbound fares information is collected.<br/>Note: on deep links with pre-selected flight this output will not be provided."
        },
        "availableInboundFares": {
          "typeRef": "#/domains/FlightBooking/types/AvailableFares",
          "description": "Emitted when actual inbound fares information is collected.<br/>Note: on deep links with pre-selected flight this output will not be provided."
        },
        "availableSeats": {
          "typeRef": "#/domains/FlightBooking/types/AvailableSeatsStage",
          "staged": true
        },
        "estimatedPrice": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Price shown by the website prior to requiring passenger information.<br/>On many flight booking websites, it is possible to view an estimated price without entering passenger details, provided that the deeplink works and goes past the home page, where the count of passengers and their ages are usually required. This estimated price is emitted when the automation reaches a page where passenger or billing information is required, as long as the price is displayed.<br/>This is likely not the final price, as flight ancilliaries may be added as requested, or additional credit card charges may be applied."
        },
        "priceBreakdown": {
          "typeRef": "#/domains/FlightBooking/types/PriceBreakdown",
          "description": "The list of price components, as found on the website."
        },
        "finalPrice": {
          "description": "Emitted immediately before placing order, when final price is available.<br/>Automation will request <code>finalPriceConsent</code> input which should match this object.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "bookingConfirmation": {
          "typeRef": "#/domains/FlightBooking/types/BookingConfirmation"
        }
      },
      "types": {
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features like seat selection. Clients should send <code>false</code> or omit flags if specific features are not implemented on their end.",
          "properties": {
            "seatSelection": {
              "type": "boolean",
              "description": "If <code>true</code>, automation will request <code>selectedSeats</code> for seat selection.",
              "default": false
            }
          }
        },
        "Itinerary": {
          "type": "object",
          "description": "Deprecated. See <a href=\"#Search\">Search</a> and <a href=\"#FlightSearch\">FlightSearch</a> instead.<br/>Information about flights and cabin class preference.",
          "deprecated": true,
          "properties": {
            "cabinClass": {
              "$ref": "#/domains/FlightBooking/types/CabinClass",
              "description": "Preferred cabin class, used on flight search forms."
            },
            "outbound": {
              "$ref": "#/domains/FlightBooking/types/Flight",
              "description": "Outbound flight specification."
            },
            "inbound": {
              "$ref": "#/domains/FlightBooking/types/Flight",
              "description": "Inbound (return) flight specification. If omitted, one-way flight booking flow is used."
            }
          },
          "required": [
            "cabinClass",
            "outbound"
          ],
          "additionalProperties": false
        },
        "Search": {
          "type": "object",
          "description": "Information about flights and cabin class preference.",
          "properties": {
            "cabinClass": {
              "$ref": "#/domains/FlightBooking/types/CabinClass",
              "description": "Preferred cabin class, used on flight search forms."
            },
            "outbound": {
              "$ref": "#/domains/FlightBooking/types/FlightSearch",
              "description": "Outbound flight specification."
            },
            "inbound": {
              "$ref": "#/domains/FlightBooking/types/FlightSearch",
              "description": "Inbound (return) flight specification. If omitted, one-way flight booking flow is used."
            },
            "passengerAges": {
              "typeRef": "#/domains/Generic/types/Ages",
              "description": "Ages of all passengers.",
              "example": [
                34,
                31,
                9
              ]
            }
          },
          "required": [
            "cabinClass",
            "outbound",
            "passengerAges"
          ],
          "additionalProperties": false
        },
        "FlightSearch": {
          "type": "object",
          "description": "Outbound and inbound flights specification.",
          "properties": {
            "origin": {
              "$ref": "#/domains/FlightBooking/types/DateAirport"
            },
            "destination": {
              "$ref": "#/domains/FlightBooking/types/DateAirport"
            }
          },
          "required": [
            "origin",
            "destination"
          ],
          "additionalProperties": false
        },
        "Flight": {
          "type": "object",
          "description": "Outbound and inbound flights specification.",
          "properties": {
            "origin": {
              "$ref": "#/domains/FlightBooking/types/DateTimeAirport"
            },
            "destination": {
              "$ref": "#/domains/FlightBooking/types/DateTimeAirport"
            }
          },
          "required": [
            "origin",
            "destination"
          ],
          "additionalProperties": false
        },
        "CabinClass": {
          "type": "string",
          "enum": [
            "economy",
            "premium economy",
            "business",
            "first"
          ]
        },
        "DateAirport": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date",
              "description": "Date of flight (airport local date).",
              "example": "2019-01-01"
            },
            "airportCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "pattern": "^[A-Z]{3}$",
              "description": "International Air Transport Association airport code.",
              "example": "SFO"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Country code of airport.",
              "example": "us"
            }
          },
          "required": [
            "date",
            "airportCode"
          ],
          "additionalProperties": false
        },
        "DateTimeAirport": {
          "type": "object",
          "properties": {
            "dateTime": {
              "type": "string",
              "pattern": "^20[0-9]{2}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-3][0-9]) [012][0-9]:[0-5][0-9]$",
              "description": "Date and time of flight (airport local time).",
              "example": "2018-02-02 19:40"
            },
            "airportCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "pattern": "^[A-Z]{3}$",
              "description": "International Air Transport Association airport code.",
              "example": "SFO"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Country code of airport.",
              "example": "us"
            }
          },
          "required": [
            "dateTime",
            "airportCode"
          ],
          "additionalProperties": false
        },
        "Passengers": {
          "type": "array",
          "description": "An array with details for each passenger.",
          "pii": true,
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/FlightBooking/types/Passenger"
          }
        },
        "Passenger": {
          "type": "object",
          "pii": true,
          "properties": {
            "title": {
              "type": "string",
              "enum": [
                "mr",
                "miss",
                "ms",
                "mrs"
              ]
            },
            "firstName": {
              "type": "string",
              "description": "First name(s) or given name(s), as specified in passport or travel document.",
              "example": "Bob"
            },
            "middleName": {
              "type": "string",
              "default": "",
              "description": "Middle name, if applicable.<br/>This will only be used on websites which provide separate entry for middle names, otherwise it will be ignored.<br/>If middle name is essential for placing order, consider appending it to <code>firstName</code>."
            },
            "lastName": {
              "type": "string",
              "description": "Last name or surname, as specified in passport or travel document.",
              "example": "Smith"
            },
            "dateOfBirth": {
              "type": "string",
              "description": "Passenger's date of birth in YYYY-MM-DD format.",
              "format": "date",
              "example": "1976-01-27"
            },
            "addAdditionalLuggage": {
              "type": "integer",
              "minimum": 0,
              "maximum": 3,
              "default": 0
            },
            "document": {
              "$ref": "#/domains/Generic/types/IdentityDocument"
            },
            "frequentFlyer": {
              "$ref": "#/domains/FlightBooking/types/PassengerFrequentFlyer"
            }
          },
          "required": [
            "title",
            "firstName",
            "lastName",
            "dateOfBirth",
            "addAdditionalLuggage"
          ],
          "additionalProperties": false
        },
        "AvailableFares": {
          "type": "array",
          "description": "A list of available fares found on the website.",
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/FlightBooking/types/Fare"
          }
        },
        "Fare": {
          "type": "object",
          "description": "Flight fare information.",
          "additionalProperties": false,
          "properties": {
            "cabinClass": {
              "$ref": "#/domains/FlightBooking/types/CabinClass"
            },
            "fareName": {
              "type": "string",
              "description": "Fare marketing name as provided by airline.",
              "example": "Business Flex"
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "fareName",
            "cabinClass",
            "price"
          ]
        },
        "SelectedSeatsStage": {
          "type": "object",
          "description": "Seat selection stage. Each stage corresponds to a particular flight leg where seat selection is supported. Client provides each stage separately after reading corresponding seat availability information from <code>availableSeats</code> output.",
          "properties": {
            "seatNumbers": {
              "type": "array",
              "description": "An array of <code>seatNumber</code> selected per each passenger.<br/>Order must match the order of <code>passengers</code> array.",
              "minItems": 1,
              "maxItems": 9,
              "items": {
                "$ref": "#/domains/FlightBooking/types/SeatNumber"
              }
            }
          },
          "required": [
            "seatNumbers"
          ],
          "additionalProperties": false
        },
        "AvailableSeatsStage": {
          "type": "object",
          "description": "Seat availability information for each seat selection stage. Each stage corresponds to a particular flight leg where seat selection is supported. Each stage is emitted separately when automation reaches corresponding seat selection screen.",
          "properties": {
            "leg": {
              "type": "string",
              "description": "Flight leg name as displayed on website.",
              "example": "LTN to ZRH, Wed 7th Mar"
            },
            "seats": {
              "type": "array",
              "items": {
                "$ref": "#/domains/FlightBooking/types/Seat"
              }
            }
          },
          "required": [
            "leg",
            "seats"
          ],
          "additionalProperties": false
        },
        "SeatNumber": {
          "type": "string",
          "description": "Seat number as extracted from website.",
          "example": "7A"
        },
        "Seat": {
          "type": "object",
          "description": "Seat metadata.",
          "properties": {
            "seatNumber": {
              "$ref": "#/domains/FlightBooking/types/SeatNumber"
            },
            "available": {
              "type": "boolean",
              "description": "<code>true</code> if website allows selecting this seat, <code>false</code> otherwise."
            },
            "restricted": {
              "type": "boolean",
              "description": "<code>true</code> if seat has restrictions for certain groups of passengers."
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Seat price, if such information is available."
            }
          },
          "required": [
            "seatNumber",
            "available"
          ],
          "additionalProperties": false
        },
        "BookingConfirmation": {
          "type": "object",
          "description": "Information gathered on \"Booking success\" page.",
          "properties": {
            "bookingReference": {
              "type": "string",
              "description": "Booking reference grabbed from the page.",
              "example": "RL2XYZ"
            },
            "message": {
              "type": "string",
              "description": "Message about successful booking.",
              "example": "Your booking was successful."
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Price, if found on the successful booking page."
            }
          },
          "additionalProperties": false,
          "required": [
            "bookingReference"
          ]
        },
        "PriceBreakdown": {
          "type": "array",
          "description": "The list of price components, as found on the website.",
          "minItems": 1,
          "items": {
            "$ref": "#/domains/FlightBooking/types/PriceBreakdownItem"
          }
        },
        "PriceBreakdownItem": {
          "type": "object",
          "description": "A component of the price breakdown.",
          "properties": {
            "text": {
              "type": "string",
              "description": "The description of an item on the price breakdown list, as found on the website.",
              "example": "Credit card charge"
            },
            "price": {
              "typeRef": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "text",
            "price"
          ]
        },
        "PassengerFrequentFlyer": {
          "type": "object",
          "description": "Frequent flyer identification information",
          "properties": {
            "number": {
              "type": "string",
              "description": "Frequent flyer number",
              "example": "abc123456789"
            },
            "airlineName": {
              "type": "string",
              "description": "Complete English name of the airline",
              "example": "British Airways"
            },
            "programName": {
              "type": "string",
              "description": "Branding name of the frequent flyer programme, as defined by the airline",
              "example": "Avios Travel Rewards Programme"
            }
          },
          "required": [
            "number"
          ]
        }
      },
      "errors": [
        {
          "code": "PassengerDetailsInvalid",
          "category": "client",
          "description": "Passenger details invalid"
        },
        {
          "code": "OutboundFlightDateInvalid",
          "category": "client",
          "description": "Outbound flight date is not accepted by the website",
          "example": "Selected date is too close"
        },
        {
          "code": "InboundFlightDateInvalid",
          "category": "client",
          "description": "Inbound flight date is not accepted by the website",
          "example": "Selected date is too close"
        },
        {
          "code": "DateOfBirthInvalid",
          "category": "client",
          "description": "Date of birth is not accepted by the website",
          "example": "Child must be younger than 12"
        },
        {
          "code": "DocumentIssueDateInvalid",
          "category": "client",
          "description": "Document issue date is not accepted by the website",
          "example": "The issue date cannot be after today's date"
        },
        {
          "code": "DocumentExpiryDateInvalid",
          "category": "client",
          "description": "Document expiration date is not accepted by the website",
          "example": "Document should be valid for more than 3 months"
        },
        {
          "code": "OutboundFlightNotAvailable",
          "category": "client",
          "description": "Outbound flight is not found",
          "example": "Flight is not available on given date"
        },
        {
          "code": "InboundFlightNotAvailable",
          "category": "client",
          "description": "Inbound flight is not found",
          "example": "Flight is not available on given date"
        },
        {
          "code": "OriginAirportNotFound",
          "category": "client",
          "description": "Airport is not found with given airport code"
        },
        {
          "code": "DestinationAirportNotFound",
          "category": "client",
          "description": "Airport is not found with given airport code"
        },
        {
          "code": "CabinClassNotFound",
          "category": "client",
          "description": "Given cabin class is not found on the website"
        },
        {
          "code": "OutboundFareNotFound",
          "category": "client",
          "description": "Given outbound fare does not match one of the options we are expecting"
        },
        {
          "code": "InboundFareNotFound",
          "category": "client",
          "description": "Given inbound fare does not match one of the options we are expecting"
        },
        {
          "code": "SeatNotFound",
          "category": "client",
          "description": "Given seat does not match one of the options we are expecting"
        },
        {
          "code": "SeatSelectionNotAvailable",
          "category": "client",
          "description": "Client asked for seat selection but it's not available for the website"
        },
        {
          "code": "LuggageCannotBeAdded",
          "category": "client",
          "description": "Luggage cannot be added",
          "example": "Cannot add an additional luggage for selected fare."
        },
        {
          "code": "PassengerDocumentRequired",
          "category": "client",
          "description": "Passenger document (passport or other travel document) is required by the website"
        }
      ],
      "attributes": {
        "airlineCode": {
          "type": "string",
          "description": "IATA reservation code, two-character codes assigned by the International Air Transport Association (IATA) to the airline.",
          "minLength": 2,
          "maxLength": 4,
          "example": "AA"
        }
      }
    },
    "CoachBooking": {
      "description": "Automates bus and chack tickets booking on websites.",
      "private": false,
      "inputs": {
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point. Should be a deep link to one of the checkout flow pages."
        },
        "search": {
          "typeRef": "#/domains/CoachBooking/types/Search",
          "initial": true
        },
        "selectedOutboundTrip": {
          "typeRef": "#/domains/CoachBooking/types/Trip",
          "initial": true
        },
        "selectedInboundTrip": {
          "typeRef": "#/domains/CoachBooking/types/Trip",
          "initial": true
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account"
        },
        "passengers": {
          "typeRef": "#/domains/CoachBooking/types/Passengers",
          "initial": true
        },
        "payment": {
          "typeRef": "#/domains/Generic/types/Payment"
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken"
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Client's consent for final price, should exactly match the <code>finalPrice</code> object from output.<br/>Automation will not proceed with placing order until the consent is provided."
        },
        "options": {
          "typeRef": "#/domains/CoachBooking/types/Options",
          "default": {},
          "initial": true
        }
      },
      "outputs": {
        "finalPrice": {
          "description": "Emitted immediately before placing order, when final price is available.<br/>Automation will request <code>finalPriceConsent</code> input which should match this object.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "bookingConfirmation": {
          "typeRef": "#/domains/FlightBooking/types/BookingConfirmation"
        }
      },
      "types": {
        "Search": {
          "type": "object",
          "description": "Information about the trip.",
          "properties": {
            "outbound": {
              "$ref": "#/domains/CoachBooking/types/CoachSearch",
              "description": "Outbound trip specification."
            },
            "inbound": {
              "$ref": "#/domains/CoachBooking/types/CoachSearch",
              "description": "Inbound (return) trip specification. If omitted, one-way trip booking flow is used."
            },
            "passengerAges": {
              "typeRef": "#/domains/Generic/types/Ages",
              "description": "Ages of all passengers.",
              "example": [
                34,
                31,
                9
              ]
            }
          },
          "required": [
            "outbound",
            "passengerAges"
          ],
          "additionalProperties": false
        },
        "CoachSearch": {
          "type": "object",
          "description": "Outbound and inbound trips specification.",
          "properties": {
            "origin": {
              "$ref": "#/domains/CoachBooking/types/DateTerminal"
            },
            "destination": {
              "$ref": "#/domains/CoachBooking/types/DateTerminal"
            }
          },
          "required": [
            "origin",
            "destination"
          ],
          "additionalProperties": false
        },
        "DateTerminal": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date",
              "description": "Date of trip (terminal local date).",
              "example": "2019-01-01"
            },
            "terminalLocality": {
              "type": "string",
              "description": "Terminal locality, usually city name.",
              "example": "London"
            },
            "terminalName": {
              "type": "string",
              "description": "Name of the terminal as found on the booking website.",
              "example": "London Liverpool Street"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Country code of the terminal.",
              "example": "gb"
            }
          },
          "required": [
            "date",
            "terminalLocality",
            "terminalName"
          ],
          "additionalProperties": false
        },
        "Trip": {
          "type": "object",
          "description": "Outbound and inbound specification.",
          "properties": {
            "origin": {
              "$ref": "#/domains/CoachBooking/types/DateTimeTerminal"
            },
            "destination": {
              "$ref": "#/domains/CoachBooking/types/DateTimeTerminal"
            }
          },
          "required": [
            "origin",
            "destination"
          ],
          "additionalProperties": false
        },
        "DateTimeTerminal": {
          "type": "object",
          "properties": {
            "dateTime": {
              "type": "string",
              "pattern": "^20[0-9]{2}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-3][0-9]) [012][0-9]:[0-5][0-9]$",
              "description": "Date and time (terminal local time).",
              "example": "2018-02-02 19:40"
            },
            "terminalLocality": {
              "type": "string",
              "description": "Terminal locality, usually city name.",
              "example": "London"
            },
            "terminalName": {
              "type": "string",
              "description": "Name of the terminal as found on the booking website.",
              "example": "London Liverpool Street"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Country code of the terminal.",
              "example": "gb"
            }
          },
          "required": [
            "dateTime",
            "terminalLocality",
            "terminalName"
          ],
          "additionalProperties": false
        },
        "Passengers": {
          "type": "array",
          "description": "An array with details for each passenger.",
          "pii": true,
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/CoachBooking/types/Passenger"
          }
        },
        "Passenger": {
          "type": "object",
          "pii": true,
          "properties": {
            "title": {
              "type": "string",
              "enum": [
                "mr",
                "miss",
                "ms",
                "mrs"
              ]
            },
            "firstName": {
              "type": "string",
              "description": "First name(s) or given name(s), as specified in passport or travel document.",
              "example": "Bob"
            },
            "middleName": {
              "type": "string",
              "default": "",
              "description": "Middle name, if applicable.<br/>This will only be used on websites which provide separate entry for middle names, otherwise it will be ignored.<br/>If middle name is essential for placing order, consider appending it to <code>firstName</code>."
            },
            "lastName": {
              "type": "string",
              "description": "Last name or surname, as specified in passport or travel document.",
              "example": "Smith"
            },
            "dateOfBirth": {
              "type": "string",
              "description": "Passenger's date of birth in YYYY-MM-DD format.",
              "format": "date",
              "example": "1976-01-27"
            },
            "addAdditionalLuggage": {
              "type": "integer",
              "minimum": 0,
              "maximum": 3,
              "default": 0
            },
            "document": {
              "$ref": "#/domains/CoachBooking/types/PassengerDocument"
            }
          },
          "required": [
            "title",
            "firstName",
            "lastName",
            "dateOfBirth",
            "addAdditionalLuggage"
          ],
          "additionalProperties": false
        },
        "PassengerDocument": {
          "type": "object",
          "description": "Passenger ID (passport or other travel document). Automation may fail if this information is required by website, but not provided by Client.",
          "pii": true,
          "properties": {
            "type": {
              "type": "string",
              "description": "Document type.",
              "enum": [
                "passport"
              ]
            },
            "number": {
              "type": "string",
              "description": "Document number.",
              "example": "75 127001"
            },
            "issueDate": {
              "type": "string",
              "format": "date",
              "example": "2008-01-01"
            },
            "expirationDate": {
              "type": "string",
              "format": "date",
              "example": "2028-01-01"
            },
            "issueCountryCode": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Code of country where the document was issued."
            }
          },
          "required": [
            "type",
            "number",
            "expirationDate",
            "issueCountryCode"
          ],
          "additionalProperties": false
        },
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features such as upsells and additional features. Clients should send <code>false</code> or omit flags if specific features are not implemented on their end."
        }
      },
      "errors": [
        {
          "code": "TripInvalid",
          "category": "client",
          "description": "Trip details are invalid."
        },
        {
          "code": "OutboundTripNotAvailable",
          "category": "client",
          "description": "Outbound trip dates/times are not available, either sold out or not found."
        }
      ],
      "attributes": {}
    },
    "VacationRental": {
      "description": "",
      "private": false,
      "inputs": {
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point."
        },
        "guestAges": {
          "typeRef": "#/domains/Generic/types/Ages",
          "description": "Ages of all guests."
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account"
        },
        "payment": {
          "typeRef": "#/domains/Generic/types/Payment"
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken"
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Client's consent for final price, should exactly match the <code>finalPrice</code> object from output.<br/>Automation will not proceed with placing order until the consent is provided."
        },
        "options": {
          "typeRef": "#/domains/VacationRental/types/Options",
          "default": {},
          "initial": true
        },
        "deposit": {
          "typeRef": "#/domains/VacationRental/types/Deposit"
        },
        "pets": {
          "typeRef": "#/domains/VacationRental/types/Pets"
        }
      },
      "outputs": {
        "finalPrice": {
          "description": "Emitted immediately before placing order, when final price is available.<br/>Automation will request <code>finalPriceConsent</code> input which should match this object.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "bookingConfirmation": {
          "typeRef": "#/domains/VacationRental/types/BookingConfirmation"
        },
        "availableDeposits": {
          "typeRef": "#/domains/VacationRental/types/AvailableDeposits",
          "description": "Emitted when actual deposit information is collected.<br/>Note: on deep links with pre-selected deposits this output may not be provided."
        },
        "estimatedPrice": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Price shown by the website prior to requiring guest information."
        },
        "estimatedDepositPrice": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Where available, deposit price shown by the website prior to requiring guest information."
        }
      },
      "types": {
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features.",
          "properties": {
            "deposit": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "AvailableDeposits": {
          "type": "array",
          "description": "A list of available deposits found on the page.",
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/VacationRental/types/Deposit"
          }
        },
        "Deposit": {
          "type": "object",
          "description": "Deposit information.",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Deposit prompt as provided by the website.",
              "example": "Early bird deposit"
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "name",
            "price"
          ]
        },
        "Pets": {
          "type": "object",
          "description": "Pets information.",
          "additionalProperties": false,
          "properties": {
            "total": {
              "type": "number",
              "minimum": 0,
              "maximum": 9,
              "description": "Total count of pets for the booking, including dogs.",
              "example": 0
            },
            "dogs": {
              "type": "number",
              "minimum": 0,
              "maximum": 9,
              "description": "Total count of dogs for the booking.",
              "example": 0
            }
          },
          "required": [
            "total",
            "dogs"
          ]
        },
        "BookingConfirmation": {
          "type": "object",
          "description": "Information gathered on \"Booking success\" page.",
          "properties": {
            "bookingReference": {
              "type": "string",
              "description": "Booking reference grabbed from the page.",
              "example": "RL2XYZ"
            },
            "message": {
              "type": "string",
              "description": "Message about successful booking.",
              "example": "Your booking was successful."
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Price, if found on the successful booking page."
            }
          },
          "additionalProperties": false,
          "required": [
            "bookingReference"
          ]
        }
      },
      "errors": [
        {
          "code": "DepositNotFound",
          "category": "client",
          "description": "Given deposit option does not match one of the options we are expecting"
        },
        {
          "code": "PetOptionInvalid",
          "category": "client",
          "description": "Given pet option does not match one of the options we are expecting"
        },
        {
          "code": "PetOptionNotAvailable",
          "category": "client",
          "description": "Pet option is not available"
        },
        {
          "code": "GuestCountInvalid",
          "category": "client",
          "description": "Number of guests is not accepted by the website"
        },
        {
          "code": "GuestAgeInvalid",
          "category": "client",
          "description": "Guest age is not accepted by the website"
        },
        {
          "code": "VacationRentalNotAvailable",
          "category": "client",
          "description": "Vacation rental is not found",
          "example": "Vacation rental unavailable on given date provided"
        }
      ],
      "attributes": {}
    },
    "MotorInsurance": {
      "description": "",
      "private": false,
      "inputs": {
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point."
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account"
        },
        "payment": {
          "typeRef": "#/domains/Generic/types/Payment"
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken"
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Client's consent for final price, should exactly match the <code>finalPrice</code> object from output.<br/>Automation will not proceed with placing order until the consent is provided."
        },
        "vehicle": {
          "typeRef": "#/domains/MotorInsurance/types/Vehicle"
        },
        "options": {
          "typeRef": "#/domains/MotorInsurance/types/Options",
          "default": {},
          "initial": true
        },
        "selectedVoluntaryExcess": {
          "typeRef": "#/domains/MotorInsurance/types/TextItem",
          "description": "Selected voluntary excess"
        },
        "cookies": {
          "typeRef": "#/domains/Generic/types/Cookies"
        }
      },
      "outputs": {
        "finalPrice": {
          "description": "Emitted immediately before placing order, when final price is available.<br/>Automation will request <code>finalPriceConsent</code> input which should match this object.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "estimatedPrice": {
          "description": "Emitted before asking for payment information.<br/>This is usually not the final amount to be paid, especially on websites which charge credit and company cards additionally. You will get <code>finalPrice</code> later.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "purchaseConfirmation": {
          "typeRef": "#/domains/MotorInsurance/types/PurchaseConfirmation"
        },
        "availableVoluntaryExcesses": {
          "typeRef": "#/domains/MotorInsurance/types/TextList",
          "description": "List of voluntary excesses to choose from."
        },
        "coverSummary": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the cover summary is presented."
        },
        "assumptions": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the assumptions are presented."
        },
        "statements": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the statements are presented."
        },
        "feesSummary": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the fees are presented."
        },
        "policyWording": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the policy wording is presented."
        },
        "statementOfFact": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the statement of fact is presented."
        },
        "privacyPolicy": {
          "typeRef": "#/domains/Generic/types/StructuredTextItem",
          "description": "Emitted when the privacy policy is presented."
        }
      },
      "types": {
        "PurchaseConfirmation": {
          "type": "object",
          "description": "Information gathered on the \"confirmation\" page.",
          "properties": {
            "purchaseReference": {
              "type": "string",
              "description": "Reference code grabbed from the page.",
              "example": "RL2XYZ"
            },
            "message": {
              "type": "string",
              "description": "The confirmation message.",
              "example": "Thank you for using UBIO Insurance. Your quote is ABC123 and purchase reference is DEF456."
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Price, if found on the confirmation page."
            }
          },
          "additionalProperties": false,
          "required": [
            "purchaseReference"
          ]
        },
        "Vehicle": {
          "type": "object",
          "description": "Information about the vehicle being insured.",
          "pii": true,
          "properties": {
            "registrationNumber": {
              "type": "string",
              "description": "Vehicle registration number (licence plate).",
              "example": "Y900MCL"
            }
          },
          "additionalProperties": false,
          "required": [
            "registrationNumber"
          ]
        },
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features such as upsells and additional cover. Clients should send <code>false</code> or omit flags if specific features are not implemented on their end.",
          "properties": {
            "legalCover": {
              "type": "boolean",
              "default": false
            },
            "breakdownCover": {
              "type": "boolean",
              "default": false
            },
            "personalInjuryCover": {
              "type": "boolean",
              "default": false
            },
            "carHireCover": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "AvailableCovers": {
          "type": "array",
          "description": "A list of available cover options found on the page.",
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/MotorInsurance/types/Cover"
          }
        },
        "SelectedCover": {
          "oneOf": [
            {
              "$ref": "#/domains/MotorInsurance/types/Cover"
            },
            {
              "type": "null"
            }
          ]
        },
        "Cover": {
          "type": "object",
          "description": "Cover information.",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Cover marketing name as provided by the insurer.",
              "example": "European Plus"
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "name",
            "price"
          ]
        },
        "PolicyGroupInfo": {
          "type": "array",
          "description": "Group of information about the policy.",
          "minItems": 1,
          "items": {
            "$ref": "#/domains/MotorInsurance/types/PolicyGroupItem"
          }
        },
        "PolicyGroupItem": {
          "type": "object",
          "description": "Piece of information about the policy.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Type of information as provided by the insurer.",
              "example": "Policy details"
            },
            "value": {
              "type": "string",
              "description": "Information details or url, where available.",
              "example": "https://www.example.com/documents/policy-details.pdf"
            }
          },
          "required": [
            "name",
            "value"
          ],
          "additionalProperties": false
        },
        "TextList": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/domains/MotorInsurance/types/TextItem"
          }
        },
        "TextItem": {
          "type": "string"
        }
      },
      "errors": [
        {
          "code": "LegalCoverNotFound",
          "category": "client",
          "description": "Given legal cover does not match one of the options we are expecting"
        },
        {
          "code": "BreakdownCoverNotFound",
          "category": "client",
          "description": "Given breakdown cover does not match one of the options we are expecting"
        },
        {
          "code": "PersonalInjuryCoverNotFound",
          "category": "client",
          "description": "Given personal injury cover does not match one of the options we are expecting"
        },
        {
          "code": "CarHireCoverNotFound",
          "category": "client",
          "description": "Given car hire cover does not match one of the options we are expecting"
        },
        {
          "code": "RegistrationNumberInvalid",
          "category": "client",
          "description": "Registration number is not accepted by the website"
        },
        {
          "code": "RegistrationNumberRequired",
          "category": "client",
          "description": "Registration number is required by the website"
        }
      ],
      "attributes": {}
    },
    "LoanApplication": {
      "description": "",
      "private": false,
      "inputs": {
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point.",
          "initial": true
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account",
          "initial": true
        },
        "loan": {
          "typeRef": "#/domains/LoanApplication/types/Loan",
          "initial": true
        },
        "applicant": {
          "typeRef": "#/domains/LoanApplication/types/Applicant",
          "initial": true
        },
        "addresses": {
          "typeRef": "#/domains/LoanApplication/types/Addresses",
          "initial": true
        },
        "loanConsent": {
          "typeRef": "#/domains/LoanApplication/types/Quote",
          "description": "Client's consent for the loan, should exactly match the <code>quote</code> object from output.<br/>Automation will not proceed with the loan application until the consent is provided."
        },
        "employment": {
          "typeRef": "#/domains/LoanApplication/types/Employment"
        },
        "bankAccount": {
          "typeRef": "#/domains/LoanApplication/types/BankAccount"
        },
        "mobilePinConfirmation": {
          "typeRef": "#/domains/LoanApplication/types/MobilePinConfirmation"
        },
        "emailVerification": {
          "typeRef": "#/domains/LoanApplication/types/EmailVerification"
        },
        "proofOfIncome": {
          "typeRef": "#/domains/LoanApplication/types/Files"
        },
        "bankStatements": {
          "typeRef": "#/domains/LoanApplication/types/Files"
        },
        "options": {
          "typeRef": "#/domains/LoanApplication/types/Options",
          "default": {},
          "initial": true
        }
      },
      "outputs": {
        "quote": {
          "typeRef": "#/domains/LoanApplication/types/Quote"
        },
        "documents": {
          "typeRef": "#/domains/LoanApplication/types/Documents"
        },
        "requirements": {
          "typeRef": "#/domains/LoanApplication/types/Requirements"
        },
        "confirmation": {
          "typeRef": "#/domains/LoanApplication/types/Confirmation"
        }
      },
      "types": {
        "Loan": {
          "type": "object",
          "description": "Loan criteria",
          "properties": {
            "purpose": {
              "type": "string",
              "description": "Purpose of the loan.",
              "example": "buy a car"
            },
            "amount": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "The loan amount required."
            },
            "repaymentMonths": {
              "type": "number",
              "description": "The number of months to repay the loan.",
              "example": 48
            },
            "existingLoan": {
              "type": "boolean",
              "description": "Existing loan with this provider."
            },
            "promotionCode": {
              "type": "string",
              "description": "Promotion code."
            }
          },
          "additionalProperties": false,
          "required": [
            "purpose",
            "amount",
            "repaymentMonths"
          ]
        },
        "Applicant": {
          "type": "object",
          "description": "The person applying for the loan.",
          "pii": true,
          "properties": {
            "title": {
              "type": "string",
              "description": "",
              "enum": [
                "mr",
                "miss",
                "ms",
                "mrs"
              ]
            },
            "firstName": {
              "type": "string",
              "description": "First name(s) or given name(s), as specified in ID.",
              "minLength": 1,
              "example": "Bob"
            },
            "middleName": {
              "type": "string",
              "default": "",
              "description": "Middle name, if applicable.<br/>This will only be used on websites which provide separate entry for middle names, otherwise it will be ignored.<br/>If middle name is essential for placing order, consider appending it to <code>firstName</code>."
            },
            "lastName": {
              "type": "string",
              "description": "Last name or surname, as specified in ID.",
              "minLength": 1,
              "example": "Smith"
            },
            "document": {
              "$ref": "#/domains/Generic/types/Document"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date",
              "description": "Date of birth YYYY-MM-DD.",
              "example": "1980-01-01"
            },
            "relationshipStatus": {
              "type": "string",
              "description": "",
              "enum": [
                "single",
                "married",
                "divorced",
                "cohabiting",
                "widower"
              ]
            },
            "nationality": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Nationality according to passport."
            },
            "countryOfBirth": {
              "$ref": "#/domains/Generic/types/CountryCode",
              "description": "Country of birth."
            }
          },
          "required": [
            "title",
            "firstName",
            "lastName",
            "dateOfBirth",
            "relationshipStatus",
            "nationality",
            "countryOfBirth"
          ],
          "additionalProperties": false
        },
        "Addresses": {
          "type": "array",
          "description": "A list of addresses for the applicant.",
          "pii": true,
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/LoanApplication/types/Address"
          }
        },
        "Address": {
          "type": "object",
          "description": "Physical address information, typically used as part of billing or shipping address objects.",
          "pii": true,
          "properties": {
            "line1": {
              "type": "string",
              "description": "Street name with house number.",
              "minLength": 1,
              "example": "501 Twin Peaks Blv"
            },
            "line2": {
              "type": "string",
              "description": "Additional address information (e.g. flat).",
              "example": "Flat 2"
            },
            "city": {
              "type": "string",
              "description": "Name of city, town or other settlement.",
              "minLength": 1,
              "example": "San Francisco"
            },
            "postcode": {
              "type": "string",
              "description": "Postcode in country-specific format, e.g. 5-digit number in US or <code>E3 3RP</code> in UK.",
              "minLength": 1,
              "example": "94581"
            },
            "countryCode": {
              "$ref": "#/domains/Generic/types/CountryCode"
            },
            "countrySubdivision": {
              "$ref": "#/domains/Generic/types/CountrySubdivision"
            },
            "dateMovedIn": {
              "type": "string",
              "format": "date",
              "description": "Date at which the applicant moved into this address."
            },
            "status": {
              "type": "string",
              "description": "",
              "enum": [
                "own",
                "rent"
              ]
            },
            "mortgage": {
              "$ref": "#/domains/LoanApplication/types/Mortgage"
            }
          },
          "required": [
            "line1",
            "line2",
            "city",
            "postcode",
            "countryCode",
            "countrySubdivision"
          ],
          "additionalProperties": false
        },
        "Mortgage": {
          "type": "object",
          "description": "Mortgage information for the associated address.",
          "pii": true,
          "properties": {
            "monthlyPayment": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "The amount paid per month by the loan applicant."
            },
            "jointMonthlyPayment": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "The amount paid per month for a joint mortgage."
            }
          },
          "required": [
            "monthlyPayment"
          ],
          "additionalProperties": false
        },
        "Employment": {
          "type": "object",
          "description": "Applicant employment details.",
          "pii": true,
          "properties": {
            "status": {
              "type": "string",
              "description": "",
              "enum": [
                "employed-fulltime",
                "employed-parttime",
                "unemployed",
                "self-employed",
                "on-benefits",
                "retired"
              ]
            },
            "jobTitle": {
              "type": "string",
              "description": "Job title.",
              "example": "Computer programmer"
            },
            "grossIncome": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Applicant's total annual gross salary (before tax)."
            },
            "netIncome": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Applicant's total annual net salary (after tax)."
            }
          },
          "required": [
            "status",
            "jobTitle"
          ],
          "additionalProperties": false
        },
        "BankAccount": {
          "type": "object",
          "description": "Bank account information - where the loan is paid into.",
          "pii": true,
          "properties": {
            "sortCode": {
              "type": "string",
              "description": "Account sort code.",
              "example": "001122",
              "minLength": 6,
              "maxLength": 6
            },
            "accountNumber": {
              "type": "string",
              "description": "Account number.",
              "example": "44556677",
              "minLength": 8,
              "maxLength": 8
            },
            "repaymentDay": {
              "type": "number",
              "description": "Day of month on which loan is repaid.",
              "example": 1,
              "min": 1,
              "max": 31
            }
          },
          "required": [
            "sortCode",
            "accountNumber",
            "repaymentDay"
          ],
          "additionalProperties": false
        },
        "MobilePinConfirmation": {
          "type": "object",
          "description": "Mobile pin confirmation to confirm the applicant's mobile number.",
          "pii": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "pin confirmation code.",
              "example": "1234",
              "minLength": 3,
              "maxLength": 10
            }
          },
          "required": [
            "code"
          ],
          "additionalProperties": false
        },
        "EmailVerification": {
          "type": "object",
          "description": "Confirmation that email verification is done.",
          "pii": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "Confirmation code.",
              "example": "1234",
              "minLength": 3,
              "maxLength": 100
            }
          },
          "required": [],
          "additionalProperties": false
        },
        "Files": {
          "type": "array",
          "description": "A list of uploaded files.",
          "pii": true,
          "minItems": 1,
          "maxItems": 99,
          "items": {
            "$ref": "#/domains/LoanApplication/types/File"
          }
        },
        "File": {
          "type": "object",
          "description": "An uploaded file.",
          "pii": true,
          "properties": {
            "filename": {
              "type": "string",
              "description": "Filename of uploaded file.",
              "example": "photo.jpg"
            },
            "data": {
              "type": "string",
              "description": "File data.",
              "example": "BASE64STRING"
            }
          },
          "required": [
            "filename",
            "data"
          ],
          "additionalProperties": false
        },
        "Requirements": {
          "type": "array",
          "description": "A list of requirements.",
          "minItems": 0,
          "maxItems": 99,
          "items": {
            "$ref": "#/domains/LoanApplication/types/Requirement"
          }
        },
        "Requirement": {
          "type": "object",
          "description": "A required input for proof - e.g. of income.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of requirement.",
              "example": "income"
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        },
        "Quote": {
          "type": "object",
          "description": "Loan quote",
          "pii": true,
          "properties": {
            "amount": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "The loan amount required."
            },
            "monthlyPayment": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "The amount repayable per month."
            },
            "repaymentMonths": {
              "type": "number",
              "description": "The number of months to repay the loan.",
              "example": 48
            },
            "apr": {
              "type": "number",
              "description": "The number of months to repay the loan.",
              "example": 48
            },
            "fee": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Additional loan fee (if applicable)."
            }
          },
          "additionalProperties": false,
          "required": [
            "amount",
            "repaymentMonths",
            "apr"
          ]
        },
        "Documents": {
          "type": "array",
          "description": "A list of downloadable documents.",
          "pii": true,
          "minItems": 0,
          "maxItems": 99,
          "items": {
            "$ref": "#/domains/LoanApplication/types/Document"
          }
        },
        "Document": {
          "type": "object",
          "description": "A document available to download/view.",
          "pii": true,
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of document.",
              "example": "Loan agreement"
            },
            "url": {
              "type": "string",
              "description": "Document url.",
              "example": "https://www.example-lender.com/loan-agreement.pdf"
            }
          },
          "additionalProperties": false
        },
        "Confirmation": {
          "type": "object",
          "description": "Confirmation of the loan.",
          "pii": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "Loan confirmation code",
              "example": "1234"
            },
            "message": {
              "type": "string",
              "description": "Confirmation message from the web page.",
              "example": "Your loan is confirmed."
            }
          },
          "required": [],
          "additionalProperties": false
        },
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features.",
          "properties": {},
          "required": [],
          "additionalProperties": false
        }
      },
      "errors": [
        {
          "code": "loanApplicationDeclined",
          "category": "client",
          "description": "Loan application denied by lender"
        }
      ],
      "attributes": {}
    },
    "EventBooking": {
      "description": "",
      "private": false,
      "inputs": {
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Website entry point."
        },
        "account": {
          "typeRef": "#/domains/Generic/types/Account"
        },
        "payment": {
          "typeRef": "#/domains/Generic/types/Payment"
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken"
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Client's consent for final price, should exactly match the <code>finalPrice</code> object from output.<br/>Automation will not proceed with placing order until the consent is provided."
        },
        "selectedDelivery": {
          "typeRef": "#/domains/EventBooking/types/Delivery",
          "description": "Requested when delivery choices are required by website.<br/>At this point <code>availableDeliveries</code> output should contain information about available delivery options.<br/>Note: on deep links with pre-selected delivery options, this input might not required.<br/>Automation may fail if the incorrect option is specified, or if the delivery option is no longer available, for example, for a late or same day booking."
        },
        "options": {
          "typeRef": "#/domains/EventBooking/types/Options",
          "default": {},
          "initial": true
        },
        "selectedRefund": {
          "typeRef": "#/domains/EventBooking/types/SelectedRefund"
        }
      },
      "outputs": {
        "tickets": {
          "description": "Emitted before finalPrice output. Contains information for the tickets about to be purchased by the job.",
          "typeRef": "#/domains/EventBooking/types/Tickets"
        },
        "finalPrice": {
          "description": "Emitted immediately before placing order, when final price is available.<br/>Automation will request <code>finalPriceConsent</code> input which should match this object.",
          "typeRef": "#/domains/Generic/types/PriceConsent"
        },
        "bookingConfirmation": {
          "typeRef": "#/domains/EventBooking/types/BookingConfirmation"
        },
        "availableDeliveries": {
          "typeRef": "#/domains/EventBooking/types/AvailableDeliveries",
          "description": "Emitted when actual delivery information is collected.<br/>Note: on deep links with pre-selected delivery, this output may not be provided."
        },
        "availableRefunds": {
          "typeRef": "#/domains/EventBooking/types/AvailableRefunds",
          "description": "Emitted when actual refund information is collected.<br/>Note: on deep links with pre-selected refund this output may not be provided."
        }
      },
      "types": {
        "BookingConfirmation": {
          "type": "object",
          "description": "Information gathered on \"Booking success\" page.",
          "properties": {
            "bookingReference": {
              "type": "string",
              "description": "Booking reference grabbed from the page.",
              "example": "RL2XYZ"
            },
            "message": {
              "type": "string",
              "description": "Message about successful booking.",
              "example": "Your booking was successful."
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price",
              "description": "Price, if found on the successful booking page."
            }
          },
          "additionalProperties": false,
          "required": [
            "bookingReference"
          ]
        },
        "Delivery": {
          "type": "object",
          "description": "Ticket delivery information.",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Delivery text as provided by the insurer.",
              "example": "Collection from venue, Royal Mail post, Courier delivery"
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "name"
          ]
        },
        "Options": {
          "type": "object",
          "description": "Flags for enabling optional automation features such as upsells and additional features. Clients should send <code>false</code> or omit flags if specific features are not implemented on their end.",
          "properties": {
            "refund": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "AvailableDeliveries": {
          "type": "array",
          "description": "A list of available delivery options found on the page.",
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/EventBooking/types/Delivery"
          }
        },
        "AvailableRefunds": {
          "type": "array",
          "description": "A list of available refund options found on the page.",
          "minItems": 1,
          "maxItems": 9,
          "items": {
            "$ref": "#/domains/EventBooking/types/Refund"
          }
        },
        "SelectedRefund": {
          "oneOf": [
            {
              "$ref": "#/domains/EventBooking/types/Refund"
            },
            {
              "type": "null"
            }
          ]
        },
        "Refund": {
          "type": "object",
          "description": "Refund information.",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Refund marketing text as provided by the insurer.",
              "example": "No-Matter-What, Medical Emergency Only"
            },
            "price": {
              "$ref": "#/domains/Generic/types/Price"
            }
          },
          "required": [
            "name"
          ]
        },
        "Tickets": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "integer",
              "minimum": 1,
              "description": "Count of tickets",
              "example": 2
            }
          },
          "required": [
            "count"
          ]
        }
      },
      "errors": [
        {
          "code": "DeliveryOptionInvalid",
          "category": "client",
          "description": "Delivery option does not match one of the options we are expecting"
        },
        {
          "code": "RefundOptionNotFound",
          "category": "client",
          "description": "Refund option does not match one of the options we are expecting"
        },
        {
          "code": "SeatSelectionNotAvailable",
          "category": "client",
          "description": "The seats are not available"
        },
        {
          "code": "EventNotAvailable",
          "category": "client",
          "description": "Requested event is not found"
        }
      ],
      "attributes": {}
    },
    "Internal": {
      "description": "Internal domain for testing platform features.",
      "private": true,
      "inputs": {
        "options": {
          "typeRef": "#/domains/Internal/types/Options",
          "description": "Used by service-api tests.",
          "default": {}
        },
        "url": {
          "typeRef": "#/domains/Generic/types/URL",
          "description": "Used by most test services."
        },
        "stagedInput": {
          "typeRef": "#/domains/Internal/types/Value",
          "description": "Used by test-stages service.",
          "staged": true
        },
        "finalPriceConsent": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Used by test-price-consent service."
        },
        "panToken": {
          "typeRef": "#/domains/Generic/types/PanToken",
          "description": "Used by test-pan-replacement service."
        }
      },
      "outputs": {
        "object": {
          "typeRef": "#/domains/Internal/types/Object"
        },
        "value": {
          "typeRef": "#/domains/Internal/types/Value"
        },
        "stagedOutput": {
          "typeRef": "#/domains/Internal/types/Value",
          "description": "Used by test-stages service.",
          "staged": true
        },
        "finalPrice": {
          "typeRef": "#/domains/Generic/types/PriceConsent",
          "description": "Used by test-price-consent service."
        }
      },
      "types": {
        "Value": {
          "type": [
            "null",
            "string",
            "number",
            "boolean",
            "object",
            "array"
          ],
          "description": "An arbitrary value."
        },
        "Object": {
          "type": "object",
          "description": "An object of arbitrary structure."
        },
        "Array": {
          "type": "object",
          "description": "An array of arbitrary values.",
          "items": {
            "$ref": "#/domains/Internal/types/Value"
          }
        },
        "Options": {
          "type": "object",
          "description": "Flags for testing optional features.",
          "properties": {
            "flag": {
              "type": "boolean",
              "default": false
            }
          }
        }
      },
      "errors": [
        {
          "code": "InternalError",
          "category": "server",
          "description": "Internal error occurred"
        },
        {
          "code": "ClientError",
          "category": "client",
          "description": "Client caused error"
        }
      ],
      "attributes": {}
    }
  }
}